1.네이밍 규칙 
  브랜치 네이밍
  feature/<작업내용> # Feature: 새로운 기능 추가
  # 예시 : feature/add-login, feature/create-profile
  bugfix/<버그내용> #Bugfix: 버그수정
  # 예시 : bugfix/fix-button-click, bugfix/header-display
  hotfix/<문제내용> # Hotfix: 긴급 수정
  # 예시 : hotfix/fix-critical-error, hotfix/security-issue
  chore/<작업내용> # Chore: 문서 업데이트, 환경 설정 등
  # 예시 : chore/update-readme, chore/setup-linter

2. PR 작업 시 자주 쓰는 명령어
  git checkout -b <브랜치이름>	# 브랜치 생성 및 이동:
  # 예시 : git checkout -b feature/add-login
  git branch # 현재 브랜치 확인
  git checkout <브랜치이름> # 다른 브랜치로 이동 
  git branch -d <브랜치이름> # 로컬 브랜치 삭제 
  git branch -D <브랜치이름> # 로컬 브랜치 강제삭제
  git push origin --delete <브랜치이름> # 원격 브랜치 삭제

3. 작업 및 PR 준비 명령어
  git add . # 파일 추가 
  git commit -m "<커밋 메시지>" # 커밋 
  # 예시 : git commit -m "Add login feature" 
  git push -u origin <브랜치이름> # 브랜치 푸시
  # 예시 : git push -u origin feature/add-login

4. PR 생성
	GitHub 웹사이트에서 Pull Request 생성.
	Add 로그인 생성 # PR 제목 예 :
  사용자 로그인 기능 추가 # PR 내용 예 :
    - 로그인 API 구현
    - JWT 토큰 발급
  
  PR 병합 후 브랜치 정리
    git branch -d <브랜치이름> # 로컬 브랜치 삭제
    git push origin --delete <브랜치이름> # 원격 브랜치 삭제

  작업 병합 관련 명령어 (직접 로컬에서 병합 할때 )
    git pull origin main # 다른 브랜치 변경 사항 가져오기 (병합 전)

    git add . # 충돌 해결 후 병합 충돌 발생 시 충돌 부분을 수동으로 수정한 뒤
    git commit -m "Resolve merge conflict"

    git merge <브랜치이름> # git merge <브랜치이름>

5. PR 성공시 
  1. 메인 브랜치로 이동 
    git checkout main
  2. 원격 저장소에서 최신 상태 가져오기
    git pull origin main
  3. 사용한 브랜치 삭제
    git branch -d <사용한 브랜치 이름>
    git push origin —delete <사용한 브랜치 이름>
  4. 정리 완료 후 다음 작업
    git checkout -b feature/new-task

    1. 로컬 브랜치를 특정 커밋으로 되돌리기 (Reset)
하드 리셋 (Hard Reset)
로컬 브랜치를 특정 커밋으로 되돌리고, 이후 변경 사항을 모두 삭제합니다.

bash
코드 복사
git reset --hard <커밋 해시>
주의: --hard 옵션은 되돌린 이후의 작업 내용이 사라지므로 신중히 사용하세요.
커밋 해시는 git log로 확인할 수 있습니다.
소프트 리셋 (Soft Reset)
커밋은 되돌리지만, 변경된 파일은 그대로 유지합니다.

bash
코드 복사
git reset --soft <커밋 해시>